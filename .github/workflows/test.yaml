name: "ðŸ”¬ Test"

on:
  pull_request: null
  push:
    branches:
      - "main"
      - "releases"

jobs:
  test:
    name: "Test (${{ matrix.os.name }})"

    strategy:
      matrix:
        os:
          - name: "Linux"
            runner: "ubuntu-latest"
          - name: "macOS"
            runner: "macos-latest"
          - name: "Windows"
            runner: "windows-latest"

        # Each operating system should test all Python interpreters simultaneously.
        # This nested-list syntax accomplishes that goal
        # without creating cross-products of every possible OS and interpreter.
        #
        # Note: The CPython interpreter versions should be in ascending order
        # because the last-listed version will be the default CPython version.
        #
        cpythons:
          - - "3.8"
            - "3.9"
            - "3.10"
            - "3.11"
            - "3.12"
        cpython-beta:
          - "3.13"
      fail-fast: false

    runs-on: "${{ matrix.os.runner }}"
    steps:
      - name: "Checkout the repository"
        uses: "actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8" # v5.0.0

      - name: "Setup Pythons"
        uses: "actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c" # v6.0.0
        env:
          # Disable pip upgrade warnings while setting up Python versions.
          PIP_DISABLE_PIP_VERSION_CHECK: "1"
        with:
          python-version: "${{
            format(
              '{0}\n{1}',
              matrix.cpython-beta,
              join(matrix.cpythons, '\n')
            )
            }}"
          allow-prereleases: true

      - name: "Detect Pythons"
        uses: "kurtmckee/detect-pythons@4a7b361b5ee27eb35c8b5026ac757d02751d6688" # v1.1.1

      - name: "Restore cache"
        id: "restore-cache"
        uses: "actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830" # v4.3.0
        with:
          path: |
            .mypy_cache/
            .tox/
            .venv/
          key: "test-os=${{ runner.os }}-hash=${{ hashFiles('.python-identifiers', 'pyproject.toml', 'tox.ini', 'requirements/**/*.txt') }}"

      - name: "Identify venv path"
        shell: "bash"
        run: |
          echo "venv-path=.venv/${{ runner.os == 'Windows' && 'Scripts' || 'bin' }}" >> "$GITHUB_ENV"

      - name: "Create a virtual environment"
        if: "steps.restore-cache.outputs.cache-hit == false"
        run: |
          python -m venv .venv
          ${{ env.venv-path }}/python -m pip install --upgrade pip setuptools wheel
          ${{ env.venv-path }}/pip install tox

      - name: "Run the test suite"
        run: "${{ env.venv-path }}/tox"
